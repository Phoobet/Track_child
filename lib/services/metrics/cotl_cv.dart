// lib/services/metrics/cotl_cv.dart
import 'package:opencv_dart/opencv_dart.dart' as cv;

/// ---------- Tunables (‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏û‡∏≠‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏™‡πÅ‡∏Å‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ) ----------
const int _S_COLORED_MIN = 35; // S >= 25 ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏µ
const int _V_BRIGHT_MIN = 80; // Gray >= 70 ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏™‡∏ß‡πà‡∏≤‡∏á
const int _V_DARK_MAX = 80; // Gray <= 95 ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏°‡∏∑‡∏î (‡∏î‡∏¥‡∏ô‡∏™‡∏≠/‡∏õ‡∏≤‡∏Å‡∏Å‡∏≤)
const int _S_NEARWHITE = 15; // S ‡πÉ‡∏Å‡∏•‡πâ‡∏Ç‡∏≤‡∏ß
const int _V_NEARWHITE = 240; // Gray ‡πÉ‡∏Å‡∏•‡πâ‡∏Ç‡∏≤‡∏ß

cv.Mat _rectK(int k) => cv.getStructuringElement(0 /*RECT*/, (k, k));
cv.Mat _ellipK(int k) => cv.getStructuringElement(2 /*ELLIPSE*/, (k, k));

/// ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ 255 = "‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏™‡πâ‡∏ô"
cv.Mat _ensureInsideIsWhite(cv.Mat inLineMask) {
  cv.Mat m = inLineMask;
  if (m.channels > 1) m = cv.cvtColor(m, cv.COLOR_BGR2GRAY);
  m = cv.threshold(m, 127.0, 255.0, 0 /*BINARY*/).$2;

  final total = (m.rows * m.cols).toDouble();
  final ratioWhite = cv.countNonZero(m) / total;
  // ‡∏ñ‡πâ‡∏≤‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡∏±‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö
  if (ratioWhite < 0.35 || ratioWhite > 0.90) {
    m = cv.bitwiseNOT(m);
    print('üîÑ flip inside-mask: insideWhiteRatio(before)=$ratioWhite');
  }
  return m;
}

/// ‡∏™‡∏£‡πâ‡∏≤‡∏á "‡πÅ‡∏´‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏≠‡∏Å" ‡πÅ‡∏ö‡∏ö‡∏ö‡∏≤‡∏á ‡∏î‡πâ‡∏ß‡∏¢ morphological gradient + clamp ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤
cv.Mat _buildOuterBand(cv.Mat inside) {
  final int minSide = inside.rows < inside.cols ? inside.rows : inside.cols;

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ~ 0.6% ‡∏Ç‡∏≠‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏™‡∏±‡πâ‡∏ô (‡∏Å‡∏±‡∏ô‡∏ö‡∏≤‡∏á/‡∏´‡∏ô‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô)
  final int target = (minSide * 0.004).round().clamp(2, 8);
  // gradient = dilate - erode ‚Üí ‡πÅ‡∏´‡∏ß‡∏ô‡∏ö‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏ö‡∏ô‡∏≠‡∏Å-‡πÉ‡∏ô
  final cv.Mat grad = cv.morphologyEx(inside, 3 /*MORPH_GRADIENT*/, _ellipK(3));
  // ‡∏Ç‡∏¢‡∏≤‡∏¢/‡∏´‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÉ‡∏Å‡∏•‡πâ target
  cv.Mat band = grad;
  if (target > 3) {
    band = cv.dilate(band, _ellipK(target - 1));
  }

  // ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏±‡∏ö‡πÉ‡∏ô‡πÄ‡∏™‡πâ‡∏ô: band = band & !inside
  final cv.Mat notInside = cv.bitwiseNOT(inside);
  final cv.Mat out = cv.Mat.zeros(band.rows, band.cols, band.type);
  band.copyTo(out, mask: notInside);

  // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢
  return cv.morphologyEx(out, 1 /*OPEN*/, _rectK(3));
}

/// ‡∏£‡∏ß‡∏°‡∏î‡πâ‡∏ß‡∏¢ mask (and)
cv.Mat _maskAnd(cv.Mat a, cv.Mat b) {
  final out = cv.Mat.zeros(a.rows, a.cols, a.type);
  a.copyTo(out, mask: b);
  return out;
}

/// ‡∏£‡∏ß‡∏°‡πÅ‡∏ö‡∏ö binary OR
cv.Mat _maskOr(cv.Mat a, cv.Mat b) {
  final add = cv.add(a, b);
  return cv.threshold(add, 1.0, 255.0, 0 /*BINARY*/).$2;
}

/// ‡∏ô‡∏¥‡∏¢‡∏≤‡∏° "‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•‡∏°‡∏µ‡∏™‡∏µ" (‡∏ú‡∏™‡∏° S ‡∏™‡∏π‡∏á + ‡∏™‡∏ß‡πà‡∏≤‡∏á) OR (‡∏°‡∏∑‡∏î‡∏°‡∏≤‡∏Å) ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏±‡∏î‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏Ç‡∏≤‡∏ß
cv.Mat _coloredMask(cv.Mat grayMed, cv.Mat sat) {
  final cv.Mat sGt = cv.threshold(sat, _S_COLORED_MIN.toDouble(), 255.0, 0).$2;
  final cv.Mat vBright = cv
      .threshold(grayMed, _V_BRIGHT_MIN.toDouble(), 255.0, 0)
      .$2;
  final cv.Mat bySat = _maskAnd(sGt, vBright);

  final cv.Mat vDark = cv
      .threshold(grayMed, _V_DARK_MAX.toDouble(), 255.0, 1 /*INV*/)
      .$2;
  final cv.Mat coloredPre = _maskOr(bySat, vDark);

  final cv.Mat sNearW = cv
      .threshold(sat, _S_NEARWHITE.toDouble(), 255.0, 1 /*INV*/)
      .$2;
  final cv.Mat vNearW = cv
      .threshold(grayMed, _V_NEARWHITE.toDouble(), 255.0, 0 /*BIN*/)
      .$2;
  final cv.Mat nearWhite = _maskAnd(sNearW, vNearW);
  return _maskAnd(coloredPre, cv.bitwiseNOT(nearWhite));
}

/// COTL = ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏• "‡∏°‡∏µ‡∏™‡∏µ" ‡πÉ‡∏ô‡πÅ‡∏´‡∏ß‡∏ô *‡∏ô‡∏≠‡∏Å‡πÄ‡∏™‡πâ‡∏ô* (0..1)
Future<double> computeCotl(cv.Mat gray, cv.Mat sat, cv.Mat inLineMask) async {
  // 0) ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
  final cv.Mat grayMed = cv.medianBlur(gray, 3);
  final cv.Mat inside = _ensureInsideIsWhite(inLineMask);

  // 1) ‡πÅ‡∏´‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏ö‡∏≤‡∏á
  cv.Mat band = _buildOuterBand(inside);
  int bandArea = cv.countNonZero(band);
  final int total = band.rows * band.cols;

  // ‡∏ñ‡πâ‡∏≤‡πÅ‡∏´‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô (>= 30% ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û) ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡πá‡∏Å‡πÑ‡∏õ (< 300 px) ‚Üí ‡∏õ‡∏£‡∏±‡∏ö
  final double bandRatio = bandArea / total;
  if (bandArea < 300 || bandRatio > 0.30) {
    final cv.Mat er = cv.erode(inside, _ellipK(5));
    final cv.Mat grad = cv.morphologyEx(er, 3 /*GRADIENT*/, _ellipK(3));
    band = _maskAnd(grad, cv.bitwiseNOT(inside));
    band = cv.morphologyEx(band, 1 /*OPEN*/, _rectK(3));
    bandArea = cv.countNonZero(band);
  }
  if (bandArea <= 0) {
    print('‚ö†Ô∏è COTL: bandArea=0');
    return 0.0;
  }

  // 2) ‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•‡∏°‡∏µ‡∏™‡∏µ ‡πÅ‡∏•‡∏∞‡∏•‡∏ö ‚Äú‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö‚Äù
  final cv.Mat colored = _coloredMask(grayMed, sat);
  final cv.Mat edges = cv.canny(grayMed, 60, 120);
  final cv.Mat edgesDil = cv.dilate(edges, _rectK(5));
  final cv.Mat edgesInv = cv.threshold(edgesDil, 0.0, 255.0, 1 /*INV*/).$2;

  cv.Mat coloredNoEdge = _maskAnd(colored, edgesInv);
  cv.Mat coloredNear = _maskAnd(coloredNoEdge, band);
  coloredNear = cv.morphologyEx(coloredNear, 1 /*OPEN*/, _rectK(3));

  int coloredNearCount = cv.countNonZero(coloredNear);
  double ratio = coloredNearCount / bandArea;

  // üîß Fallback ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥: ‡∏ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ 1.0 ‡πÉ‡∏´‡πâ "‡∏´‡∏î‡πÅ‡∏´‡∏ß‡∏ô" + "‡πÄ‡∏Ç‡πâ‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå"
  if (ratio >= 0.999) {
    final cv.Mat erInside = cv.erode(inside, _ellipK(7));
    final cv.Mat grad2 = cv.morphologyEx(erInside, 3 /*GRADIENT*/, _ellipK(3));
    band = _maskAnd(grad2, cv.bitwiseNOT(erInside));
    band = cv.morphologyEx(band, 1 /*OPEN*/, _rectK(3));
    bandArea = cv.countNonZero(band);

    // ‡πÄ‡∏Ç‡πâ‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏™‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢: ‡πÉ‡∏ä‡πâ vDark ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å
    final cv.Mat vDark = cv
        .threshold(grayMed, (_V_DARK_MAX - 10).toDouble(), 255.0, 1)
        .$2;
    coloredNear = _maskAnd(vDark, band);
    coloredNear = cv.morphologyEx(coloredNear, 1, _rectK(3));

    coloredNearCount = cv.countNonZero(coloredNear);
    ratio = (bandArea <= 0) ? 0.0 : (coloredNearCount / bandArea);
  }

  // debug log
  final insideRatio = cv.countNonZero(inside) / total;
  print(
    '[COTL] insideRatio=$insideRatio bandArea=$bandArea bandRatio=$bandRatio '
    'colored=$coloredNearCount ratio=$ratio',
  );

  return ratio.clamp(0.0, 1.0);
}
